<tool id="db_to_gff" name="Database to gff" version="%(prog)s 0.1">
    
    <description>
    <![CDATA[
        Get information from a gffutils database and create a new gff file. 
    ]]>
    </description>
    
    <requirements>
        <requirement type="python-module" > gffutils </requirement>
    </requirements>
    
    <stdio>
        <exit_code level="fatal" range="1:"/>
    </stdio>
    
    <version_command> python db_to_gff.py --version </version_command>
    
    <command interpreter="python">
    <![CDATA[
        
      db_to_gff.py 
        #if $gff and $gff is not None:
          --gff $gff
        #end if
        
        #if $database and $database is not None:
          --database $database
        #end if
        
        #if $source and $source is not None:
            --source $source
        #end if
        
        #if $task_selector.selections == "--all":
            $task_selector.selections
        #end if
        
        #if $task_selector.selections == "single_search":
            #if $features and $features is not None:
                --features $features
            #end if
            
            #if $seqid and $seqid is not None:
                --seqid $seqid
            #end if
            
            #if $start and $start is not None:
                --start $start
            #end if
            
            #if $end and $end is not None:
                --end $end
            #end if
            
            #if $strand and $strand is not None:
                --strand $strand
            #end if
            
            $within
        #end if
        
        #if $task_selector.selections == "batch_search":
            #if $batch_file and $batch_file is not None:
                --batch $batch_file
            #end if
        #end if
        
    ]]>
    </command>
    
    <inputs>
        <param name="database" type="data" format="gff" help="(--database)" label="Gffutils database" />
        <param name="source" type="text" help="(--source)" label="Only return features with this source" />
        <conditional name="task_selector">
            <param name="selections" type="select" label="Select query task." >
                <option value="--all" selected="True" > Request whole database </option>
                <option value="single_search" > Single database search </option>
                <option value="batch_search" > Batch database search </option>
            </param>
            <when value="single_search">
                <param name="features" type="text" help="(--features)" label="Only search for these features; can be a comma separated list" />
                <param name="seqid" type="text" help="(--seqid)" label="Only search for features with this sequence id" />
                <param name="start" type="text" help="(--start)" label="Only search for features that start with or after this region" />
                <param name="end" type="text" help="(--end)" label="Only search for features that end with or before this region" />
                <param name="strand" type="select" optional="True" help="(--strand)" label="Only search for features in strand direction; '.' returns unstranded features" >
                    <option value="+">+</option>
                    <option value="-">-</option>
                    <option value=".">.</option>
                </param>
                <param name="within" type="boolean" checked="false" truevalue="--within" falsevalue="" help="(--within)" label="Only search for features completely within start and/or end region" />
            </when>
            <when value="batch_search">
                <param name="batch_file" type="data" format="tabular" help="(--batch)" label="Tabular file with search data; format: feature - seqid - start - end - strand - within; values can be empty; always provide 5 tabs; use t/T/true/True/w/within for within, let it empty or something else for not within)" />
            </when>
        </conditional>
    </inputs>
    
    <outputs>
        <data name="gff" format="gff" label="GFF data of ${tool.name} on ${on_string}" />
    </outputs>
    
    <tests>
        <test>
            <param name="database" value="FlyBase.db" />
            <output name="gff" file="FlyBaseQuery.gff" />
        </test>
    </tests>
    
    <help>
    <![CDATA[
        **What it does**
        
        Get information from a gffutils database and create a new gff file.
        
    ]]>
    </help>
    
    <citations>
        <citation type="bibtex">
            @ARTICLE{bgruening_galaxytools,
                Author = {Björn Grüning, Cameron Smith, Torsten Houwaart, Nicola Soranzo, Eric Rasche},
                keywords = {bioinformatics, ngs, galaxy, cheminformatics, rna},
                title = {{Galaxy Tools - A collection of bioinformatics and cheminformatics tools for the Galaxy environment}},
                url = {https://github.com/bgruening/galaxytools}
            }
        </citation>
    </citations>
    
</tool>

